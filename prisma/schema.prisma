// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for StackAuth integration
model User {
  id        String   @id @default(cuid())
  stackId   String   @unique // StackAuth user ID
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resumes Resume[]
  templates Template[]

  @@map("users")
}

// Resume model - main entity
model Resume {
  id          String   @id @default(cuid())
  title       String
  slug        String?  @unique
  templateId  String
  isPublic    Boolean  @default(false)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // User relation
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Template relation
  template Template @relation(fields: [templateId], references: [id])

  // Resume sections
  personalInfo  PersonalInfo?
  experiences   Experience[]
  educations    Education[]
  skills        Skill[]
  projects      Project[]
  certifications Certification[]
  languages     Language[]
  awards        Award[]
  customSections CustomSection[]

  @@map("resumes")
}

// Template model for resume templates
model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String   @default("professional")
  isPublic    Boolean  @default(true)
  isPremium   Boolean  @default(false)
  previewUrl  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Creator relation (optional - for custom templates)
  createdBy String?
  creator   User?   @relation(fields: [createdBy], references: [id])

  // Relations
  resumes Resume[]

  @@map("templates")
}

// Personal Information
model PersonalInfo {
  id       String @id @default(cuid())
  resumeId String @unique

  firstName    String
  lastName     String
  email        String
  phone        String?
  website      String?
  linkedin     String?
  github       String?
  location     String?
  summary      String?
  profileImage String?

  // Relations
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("personal_info")
}

// Work Experience
model Experience {
  id       String @id @default(cuid())
  resumeId String
  order    Int    @default(0)

  position     String
  company      String
  location     String?
  startDate    String
  endDate      String?
  current      Boolean @default(false)
  description  String?
  technologies String? // JSON array as string

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

// Education
model Education {
  id       String @id @default(cuid())
  resumeId String
  order    Int    @default(0)

  institution String
  degree      String
  field       String?
  location    String?
  startDate   String
  endDate     String?
  current     Boolean @default(false)
  gpa         String?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("educations")
}

// Skills
model Skill {
  id       String @id @default(cuid())
  resumeId String
  order    Int    @default(0)

  name     String
  level    String @default("intermediate") // beginner, intermediate, advanced, expert
  category String @default("technical") // technical, soft, language, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("skills")
}

// Projects
model Project {
  id       String @id @default(cuid())
  resumeId String
  order    Int    @default(0)

  name         String
  description  String
  url          String?
  startDate    String?
  endDate      String?
  technologies String? // JSON array as string

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("projects")
}

// Certifications
model Certification {
  id       String @id @default(cuid())
  resumeId String
  order    Int    @default(0)

  name         String
  issuer       String
  issueDate    String
  expiryDate   String?
  credentialId String?
  url          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

// Languages
model Language {
  id       String @id @default(cuid())
  resumeId String
  order    Int    @default(0)

  name        String
  proficiency String @default("conversational") // basic, conversational, professional, native

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("languages")
}

// Awards & Achievements
model Award {
  id       String @id @default(cuid())
  resumeId String
  order    Int    @default(0)

  title       String
  issuer      String
  date        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("awards")
}

// Custom Sections for flexibility
model CustomSection {
  id       String @id @default(cuid())
  resumeId String
  order    Int    @default(0)

  title   String
  content String // JSON content for flexible structure

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("custom_sections")
}
